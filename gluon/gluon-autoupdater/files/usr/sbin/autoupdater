#!/bin/sh

# abort on error
set -e

if test $(uci get autoupdater.settings.enabled) != 1; then
  echo "autoupdater is disabled"
  exit 0
fi

BRANCH=$(uci get autoupdater.settings.branch)

PROBABILITY=$(uci get autoupdater.${BRANCH}.probability)

if test "a$1" != "a-f"; then
  echo | awk "END{srand();exit rand() > $PROBABILITY}"
  if test $? -ne 0; then
    echo "No autoupdate this time. Use -f to override"
    exit 0
  fi
fi

BASE=$(uci get autoupdater.${BRANCH}.url)
# if no signatures are needed, no pubkeys need to be defined, so don't fail
PUBKEYS=$(uci get autoupdater.${BRANCH}.pubkey) || true
GOOD_SIGNATURES=$(uci get autoupdater.${BRANCH}.good_signatures)

VERSION_FILE=/lib/gluon/release

newer_than() {
  local old="$(printf '%s\n%s\n' "$1" "$2" | sort -n | head -n 1)"
  test "$1" != "$old"
}

cleanup() {
  rm -f $manifest
  rm -f $fw_image
  rm -f $manifest_upper
  rm -f $manifest_lower
}

fail() {
  echo "$@" >&2
  exit 1
}

trap cleanup INT TERM EXIT PIPE

. /lib/ar71xx.sh

my_model="$(ar71xx_board_name)"

case "$my_model" in
  "tl-wdr4300")
    case "$(tplink_get_hwid)" in
      "360000"*)
        my_model="tl-wdr3600"
        ;;
    esac
    ;;
esac

[ -f "$VERSION_FILE" ] || fail "Couldn't determine firmware version!"

my_version="$(cat "$VERSION_FILE")"

fw_image=$(mktemp)
manifest=$(mktemp)
manifest_upper=$(mktemp)
manifest_lower=$(mktemp)

wget -O$manifest "$BASE"/manifest || fail "Couldn't fetch manifest"

awk 'BEGIN { sep=0 } /^---$/ { sep=1; next } { if(sep==0) print; else print > "'$manifest_lower'" }' $manifest > $manifest_upper

signatures=""
while read sig; do
  echo "$sig" | grep -q "^[0-9a-f]\{128\}$"
  if test $? -ne 0; then
    continue
  fi
  signatures="$signatures -s $sig"
done < $manifest_lower

pubkeys=""
for key in $PUBKEYS; do
  pubkeys="$pubkeys -p $key"
done

ecdsaverify -n $GOOD_SIGNATURES $pubkeys $signatures $manifest_upper || \
  fail "Not enough valid signatures!"

grep -q "^BRANCH=${BRANCH}$" $manifest_upper || fail "Wrong branch. We'are on ${BRANCH}"

my_firmware=$(grep "^${my_model} " $manifest_upper) || fail "No matching firmware found (model ${my_model})"

fw_version=$(echo "${my_firmware}"|cut -d' ' -f2)
fw_md5=$(echo "${my_firmware}"|cut -d' ' -f3)
fw_file=$(echo "${my_firmware}"|cut -d' ' -f4)

if newer_than "$fw_version" "$my_version"; then
  echo "New version available"
  wget -O$fw_image "${BASE}/${fw_file}" || fail "Error downloading image"

  image_md5=$(md5sum "$fw_image"|cut -b-32)
  if test "$image_md5" != "$fw_md5"; then
    fail "Invalid image checksum"
  fi

  echo "Upgrading firmware."

  sysupgrade "${fw_image}"
else
  echo "No new firmware available"
fi

exit 0
